import htb_cli.api
import sys
import optparse

print("Downloading machines from HtB API...", file=sys.stderr)
machines = htb_cli.api.all_machines()
# machines = htb_cli.api.active_machines()

machines= sorted(machines, key=lambda m: m['name'].lower())

print() # leading newline incase /etc/hosts is missing an end-of-file newline
print('# === start auto-generated by https://github.com/fx2301/htb_etc_hosts ===')
print()

def output_machines(machines):
    for machine in machines:
        assert machine['id'], f"Expected machine to have an `id` field."
        assert machine['name'], f"Expected machine {machine['id']} to have an `name` field."
        assert machine['ip'], f"Expected machine {machine['name']} to have an `ip` field."

        url = f"https://app.hackthebox.com/machines/{machine['id']}"
        host_name = f"{machine['name'].lower()}.htb"
        print(f"{machine['ip'].ljust(15,' ')}\t{host_name.ljust(20,' ')} # {url}")

print('# Easy machines')
output_machines(filter(lambda m: m['difficultyText'] == 'Easy', machines))
print()

print('# Medium machines')
output_machines(filter(lambda m: m['difficultyText'] == 'Medium', machines))
print()

print('# Hard machines')
output_machines(filter(lambda m: m['difficultyText'] == 'Hard', machines))
print()

print('# Insane machines')
output_machines(filter(lambda m: m['difficultyText'] == 'Insane', machines))
print()

remaining = list(filter(lambda m: m['difficultyText'] not in ['Easy', 'Medium', 'Hard', 'Insane'], machines))
if len(remaining) > 0:
    print(f"Warning: {len(remaining)} machines had an unexpected difficultlyText. Appended them anyway.", file=sys.stderr)

    print('# Unexpected difficulty machines')
    output_machines(remaining)
    print()

print('# === end auto-generated by https://github.com/fx2301/htb_etc_hosts ===')
print()
